using AutoMapper;
using Binder.NotificationService.Base;
using Binder.NotificationService.Contracts;
using BinderCore.DataServices.Contracts.Notification;
using BinderCore.Models.Message;
using BinderWeb.DatabaseContext.Entities;
using BinderWeb.Models.ViewModels;
using CommonUnitOfWork;
using System;
using System.Collections.Generic;
using System.Text;

namespace Binder.NotificationService.Services
{
    public class OrderNotificationService : BaseNotification, IOrderNotificationService
    {
        IEmailContentRepository _contentRepository;

        public OrderNotificationService(IUnitOfWork unitOfWork, IMapper mapper) : base(unitOfWork, mapper)
        {
        }

        //public OrderNotificationService(ISmsRepository smsRepository, IEmailRepository emailRepository, IEmailContentRepository contentRepository) : base(smsRepository, emailRepository)
        //{
        //    _contentRepository = contentRepository;
        //}

        public bool SendPaymentConfirmationNotificationToDealer(OrderMessageVm order)
        {
            throw new NotImplementedException();
        }

        public bool SendPaymentNotificationToAdmin(OrderMessageVm order)
        {
            throw new NotImplementedException();
        }

        public bool SendPaymentVarificationFailedNotificationToDealer(OrderMessageVm order)
        {
            throw new NotImplementedException();
        }



        public bool SentOrderConfirmationNotificationToDealer(OrderMessageVm order)
        {
            var message = BuildOrderConfirmationMessage(order);
            return base.SentMessage(message);

        }

        internal MessageEntityDto BuildOrderConfirmationMessage(OrderMessageVm order)
        {
            MessageEntityDto message = null;
            int titleId = 101;


            EmailContent emailContent = _contentRepository.Single(s => s.EmailTitleId == titleId);

            if (emailContent.EmailBody != null)
            {
                //DealerName={0}, Order No={1}


                message = new MessageEntityDto();

                message.FromHrRecordId = 1;
                message.ToMessageDetails = base.BuildToMessageDetails(order.UserId);
                //message.CcMessageDetails = BuildCcMessageDetails();
                message.MessageSubject = string.Format(emailContent.EmailSubject);
                message.MessageDetails = string.Format(emailContent.EmailBody, order.DealerName, order.OrderNo);
                message.SMSText = string.Format(emailContent.Smsbody, order.DealerName, order.OrderNo);
                message.NotificationText = string.Format(emailContent.NotifcationBody, order.DealerName, order.OrderNo);
                message.MessagingDate = DateTime.Now;
                message.ReferenceId = order.OrderId;
                message.ReferenceType = 1;
                //  message.MenuId = _messageService.MenuId;
                message.ModuleId = 1;
                message.RedirectLink = "";
                message.ReferenceDate = order.OrderDate;
                message.EmailTitleId = emailContent.EmailContentId;
                message.EmailNotificationTypeId = 1;
            }
            return message;
        }
    }
}
