using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using Binder.NotificationService.Contracts;
using Binder.NotificationService.Services;
using BinderCore.DataServices.SystemAdmin.Contracts;
using BinderCore.DataServices.SystemAdmin.DataServices;
using BinderCore.Services.SystemAdmin.Contracts;
using BinderCore.Services.SystemAdmin.Services;
using BinderUtility;
using BinderWeb.DatabaseContext.Entities;
using BinderWeb.Models;
using BinderWeb.Repository.BinderContractsWeb;
using BinderWeb.Repository.BinderRepositoriesWeb;
using BinderWeb.Repository.BinderWebContracts;
using BinderWeb.Repository.BinderWebRepositories;
using BinderWeb.Services.BinderContractsWeb;
using BinderWeb.Services.BinderServicesWeb;
using BinderWeb.Services.BinderWebContracts;
using BinderWeb.Services.BinderWebServices;
using CommonUnitOfWork;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;

namespace BinderWeb
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {



            //services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            //           .AddJwtBearer(options =>
            //           {
            //               options.Audience = "https://localhost:34023/";
            //               options.Authority = "https://localhost:2738/identity/";
            //           });
            //.AddJwtBearer("AzureAD", options =>
            //{
            //    options.Audience = "https://localhost:5000/";
            //    options.Authority = "https://login.microsoftonline.com/eb971100-6f99-4bdc-8611-1bc8edd7f436/";
            //});
            services.AddAuthentication("cookieAuth")
                .AddCookie("cookieAuth", config =>
                 {
                     config.Cookie.Name = "LoginCookie";
                     config.LoginPath = "/Account/Authenticate";
                 }
                );
            var appSettingsSection = Configuration.GetSection("AppSettings");
            services.Configure<AppSettings>(appSettingsSection);

            var appSettings = appSettingsSection.Get<AppSettings>();
            var key = Encoding.ASCII.GetBytes(appSettings.Secret);
            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false
                };
            });


            services.AddSession(options =>
            {
                // Set a short timeout for easy testing.
                options.IdleTimeout = TimeSpan.FromSeconds(10);
                options.Cookie.HttpOnly = true;
                // Make the session cookie essential
                options.Cookie.IsEssential = true;
            });
            services.AddControllersWithViews();
            services.AddTransient<IUsersRepository, UsersRepository>();
            services.AddTransient<IUsersService, UsersService>();

            services.AddTransient<IUserNotificationService, UserNotificationService>();
            //services.AddTransient<IProductInformationServices, ProductInformationServices>();
            //services.AddTransient<IProductInformationRepository, ProductInformationRepository>();
            //services.AddTransient<IDateProductPriceServices, DateProductPriceServices>();
            //services.AddTransient<IDateProductPriceRepository, DateProductPriceRepository>();
            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddTransient<ICommonConnection, CommonConnection>();
            services.AddTransient<DbContext, BinderDBContext>();
            services.AddDbContext<BinderDBContext>(optionsBuilder =>
            {
                optionsBuilder.UseSqlServer(Configuration["ConnectionStrings:SqlConnectionString"]);
            });

            //  services.AddDirectoryBrowser();

            //services.AddMvc(option => option.EnableEndpointRouting = false).AddNewtonsoftJson();
            services.AddSingleton<IFileProvider>(new PhysicalFileProvider(
                Path.Combine(Directory.GetCurrentDirectory(), "wwwroot")));
            services.AddMvc();
            services.AddAutoMapper(typeof(Startup));
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            //app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();
            app.UseSession();
            // app.UseHttpContextItemsMiddleware();
            app.UseCookiePolicy();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Account}/{action=Login}/{id?}");
            });
        }
    }
}
